## name Accept various non-numeric classes
## failures 0
## cut

m/ \w /smx;
s/ . //smx;
qr/ [[:xdigit:]] /smx;
qr/ \D /smx;
qr/ [[:^digit:]] /smx;

#-----------------------------------------------------------------------------

## name Accept [0-9] and \p{PosixDigit}
## failures 0
## cut

m/ [0-9] /smx;
s/ \p{PosixDigit} //smx;

#-----------------------------------------------------------------------------

## name Reject \d, \D, [:digit:], and [[:^digit:]]
## failures 5
## cut

m/ \d /smx;
m/ [\d] /smx;
s/ [[:digit:]] //smx;
qr{ [^\D] }smx;
qr{ [^[:^digit:]] }smx;

#-----------------------------------------------------------------------------

## name Accept \d and [:digit:] if /a is in effect
## failures 0
## cut

m/ \d /smxa;
m/ [[:digit:]] /smxaa;
m/ (?a: \d ) /smx;

#-----------------------------------------------------------------------------

## name Accept \d and [:digit:] if only part of a bracketed class
## failures 0
## cut

m/ [\da-z] /smx;
m/ [[:digit:]A-Z] /smx;

#-----------------------------------------------------------------------------

## name Accept \d and [:digit:] if restricted to ASCII
## failures 0
## cut

m/ [^\D[:^xdigit:]] /smx;
m/ [^[:^digit:]\P{ascii}] /smx;

#-----------------------------------------------------------------------------

## name Accept \d and [:digit:] in extended character class
## failures 0
## cut

m/ (?[ \d ]) /smx;
qr{ (?[ [:digit:] ]) }smx;

#-----------------------------------------------------------------------------

## name Reject \d and [:digit:] in extended character class if told to do so
## parms { allow_in_extended_character_class => 'never' }
## failures 2
## cut

m/ (?[ \d ]) /smx;
qr{ (?[ [:digit:] ]) }smx;

#-----------------------------------------------------------------------------

## name Accept \d and [:digit:] in extended character class if intersected with ASCII
## parms { allow_in_extended_character_class => 'safe' }
## failures 0
## cut

m/ (?[ [:ascii:] & \d ]) /smx;
qr< (?[ [:digit:] & \p{ASCII} ]) >smx;
s/ (?[ \d & [:xdigit:] ]) //smx;

#-----------------------------------------------------------------------------

## name Reject \d and [:digit:] in extended character class unless intersected with ASCII
## parms { allow_in_extended_character_class => 'safe' }
## failures 2
## cut

m/ (?[ \d ]) /smx;
qr< (?[ [:digit:] ]) >smx;

#-----------------------------------------------------------------------------

## name Accept \d if told to
## parms { allow_back_slash_dee => '1' }
## failures 0
## cut

m/ \d /smx;

#-----------------------------------------------------------------------------

## name Reject [:digit:] if told to accept \d
## parms { allow_back_slash_dee => '1' }
## failures 1
## cut

m/ [[:digit:]] /smx;

#-----------------------------------------------------------------------------

## name Accept [:digit:] if told to
## parms { allow_posix_digit => '1' }
## failures 0
## cut

m/ [[:digit:]] /smx;

#-----------------------------------------------------------------------------

## name Reject \d if told to accept [:digit:]
## parms { allow_posix_digit => '1' }
## failures 1
## cut

m/ \d /smx;

#-----------------------------------------------------------------------------

## name Accept \d and [:digit:] if told to
## parms { allow_back_slash_dee => '1', allow_posix_digit => '1' }
## failures 0
## cut

qr{ \d [[:digit:]] }smx;

#-----------------------------------------------------------------------------

## name Reject inside (*script_run: ... ) by default
## failures 1
## cut

qr{ (*script_run: \d ) }smx;

#-----------------------------------------------------------------------------

## name Accept inside (*script_run: ... ) if told to
## parms { allow_if_single_script => '1' }
## failures 0
## cut

qr{ (*script_run: \d ) }smx;

#-----------------------------------------------------------------------------

## name Accept singleton if told to do so
## parms { allow_if_singleton => '1' }
## failures 0
## cut

m/ \d /smx;
m/ \d? /smx;
m/ \d{1} /smx;
m/ \d{0,1} /smx;
m/ \d \w /smx;
m/ [\d] /smx;
m/ [\d]? /smx;
m/ [\d]{1} /smx;
m/ [\d] \w /smx;

#-----------------------------------------------------------------------------

## name Reject non-singleton even if accepting singleton
## parms { allow_if_singleton => '1' }
## failures 5
## cut

m/ \d* /smx;
m/ \d+ /smx;
m/ \d{0,} /smx;
m/ \d\d /smx;
m/ [\d][\d] /smx;

#-----------------------------------------------------------------------------

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 78
#   indent-tabs-mode: nil
#   c-indentation-style: bsd
# End:
# ex: set ts=8 sts=4 sw=4 tw=78 ft=perl expandtab shiftround :
