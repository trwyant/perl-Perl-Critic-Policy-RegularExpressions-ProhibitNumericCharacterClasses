#!/trw/local/perl/default/bin/perl

use 5.006001;

use strict;
use warnings;

use English qw{ -no_match_vars };
use Getopt::Long 2.33 qw{ :config auto_version };
use Perl::Critic;
use Perl::Critic::Utils qw{ all_perl_files };
use Perl::Critic::Violation;
# The following is superfluous as far as Perl::Critic is concerned, but
# handy if we want to run the debugger.
use Perl::Critic::Policy::RegularExpressions::ProhibitNumericCharacterClasses;
use Pod::Usage;
use Readonly;
use Text::Abbrev qw{ abbrev };

our $VERSION = '0.000_012';

Readonly::Scalar my $DEFAULT_SINGLE_FILE_FORMAT => 4;
Readonly::Scalar my $DEFAULT_MULTI_FILE_FORMAT  => 5;

my %opt = (
    allow_in_extended_character_class   => 'always',
);

my %valid_extended = abbrev( qw{ always safe never } );

GetOptions( \%opt,
    qw{
        allow_back_slash_dee|dee!
        allow_posix_digit|posix-digit!
        allow_if_single_script|single-script!
        allow_if_singleton|singleton!
    },
    'allow_in_extended_character_class|extended-character-class=s' => sub {
        $opt{$_[0]} = $valid_extended{$_[1]}
            or die "Invalid -extended-character-class value '$_[1]'\n";
        return;
    },
    'format=s'  => \( my $format ),
    'verbose!'  => \( my $verbose ),
    help => sub { pod2usage( { -verbose => 2 } ) },
) or pod2usage( { -verbose => 0 } );

if ( ! @ARGV ) {
    -e 'MANIFEST'
        or die "No arguments specified and no MANIFEST found\n";
    require ExtUtils::Manifest;
    my $manifest = ExtUtils::Manifest::maniread();
    @ARGV = sort all_perl_files( keys %{ $manifest } )  ## no critic (RequireLocalizedPunctuationVars)
}

my $critic = Perl::Critic->new(
    -profile    => 'NONE',
);

$critic->add_policy(
    -policy => 'RegularExpressions::ProhibitNumericCharacterClasses',
    -config => \%opt,
);

Perl::Critic::Violation::set_format(
    defined $format ? $format :
    ( @ARGV > 1 || -d $ARGV[0] ) ?
        $DEFAULT_MULTI_FILE_FORMAT :
        $DEFAULT_SINGLE_FILE_FORMAT
);

foreach my $fn ( @ARGV ) {

    foreach my $pf ( -e $fn ? all_perl_files( $fn ) : \$fn ) {
        my @violations = Perl::Critic::Violation::sort_by_location(
            $critic->critique( $pf ) );

        if ( @violations ) {
            foreach ( @violations ) {
                print;
            }
        } elsif ( $verbose ) {
            local $_ = Perl::Critic::Violation::get_format();
            local $OUTPUT_RECORD_SEPARATOR = "\n";
            print m/ (?: \A | (?<= [^%] ) ) (?: %% )* %f /smx ?
                "$pf source OK" : 'source OK';
        }
    }
}

__END__

=head1 NAME

numeric-character-classes - Find numeric character classes.

=head1 SYNOPSIS

 numeric-character-classes .
 numeric-character-classes lib/
 numeric-character-classes -help
 numeric-character-classes -version

=head1 OPTIONS

The following options are supported. They can be specified with either
single or double leading dashes. Boolean options can be negated by
prefixing either C<'no'> or C<'no-'> to the name of the option. Option
names can be abbreviated, as long as the abbreviation is unique.

=head2 -dee

If this Boolean option is asserted, C<\d> is allowed.

The default is C<-no-dee>.

=head2 -extended-character-class

 -extended-character-class=safe

This option specifies how to analyze extended character classes.
Possible values are C<'always'>, C<'safe'>, and C<'never'>, or their
unique abbreviations.

The default is C<'always'>.

=head2 -help

This option displays the documentation for this script. The script then
exits.

=head2 -posix-digit

If this Boolean option is asserted, C<[[:digit:]]> is allowed.

The default is C<-no-posix-digit>.

=head2 -single-script

If this Boolean option is asserted, C<\d> and C<[[:digit:]]> are allowed
if they are restricted to a single script -- that is, if they are inside
a C<(*script_run:...)>.

The default is C<-no-single-script>.

=head2 -singleton

If this Boolean option is asserted, C<\d> and C<[[:digit:]]> are allowed
if they are quantified to match at most one character.

The default is C<-no-singleton>.

=head2 -verbose

If this Boolean option is asserted, an C<OK> message is displayed for
files that contain no violations. If not, nothing is displayed for files
that contain no violations.

The default is C<-no-verbose>.

=head2 -version

This option displays the version of this script. The script then exits.

=head1 DESCRIPTION

This Perl script wraps the rogue Perl::Critic policy
C<RegularExpressions::ProhibitNumericCharacterClasses>.

If no arguments are passed, the contents of the F<MANIFEST> are scanned
-- at least, those which appear to be Perl files.

If an argument is passed which is not a file name, it is assumed to be
code to critique. It is written to a temporary file, and that file is
analyzed.

Almost all F<perlcritic> options are simply passed through. However:

C<-profile> and C<-noprofile> are intercepted by this script so that if
neither is specified it can supply its own default, which is
F<~/.perlcritic-numeric-character-classes>.

C<-single-policy> is intercepted by this script to prevent it being
passed to Perl-Critic. A warning is issued if this option is actually
found.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT

Copyright (C) 2012-2021 by Thomas R. Wyant, III

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 72
#   indent-tabs-mode: nil
#   c-indentation-style: bsd
# End:
# ex: set ts=8 sts=4 sw=4 tw=72 ft=perl expandtab shiftround :
